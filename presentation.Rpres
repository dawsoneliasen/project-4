MCMC Redistricting
========================================================
author: Dawson Eliasen, Jonathan Olavarria, Henrique Rio
autosize: true

Motivation
========================================================

Methodology
========================================================

Redistricting problem representation
========================================================
- Redistricting is represented as a “graph cut” problem
- We can represent a state as a graph $G$
- Each precinct $i$ is a node in $V$
- There is an undirected edge $i \sim j$ connecting nodes $i, j$ if the precincts $i, j$ share a border
- Then, we get voter districts by partitioning the set of nodes $V$
- Since districts are formed by “cutting” edges, we can think of redistricting as a “graph cut” problem


Monte Caro Markov Chain (MCMC)
========================================================
The Metropolis-Hastings algorithm is used to simulate redistricting plans.
- Define a function $f(x)$, proportional to the pdf of the desired distribution
- Define a proposal distribution $g(x | y)$ that provides a new sample $x$ given the previous sample $y$
- Start with a valid sample, $x_0$
- At each iteration:
    - Generate a “candidate” sample $x^*$ from $g$ (perturb $x_i$)
    - Accept $x^*$ with probability equal to $\frac{f(x^*)}{f(x_i}}$


MCMC Example
========================================================
To simulate redistricting, “perturbation” looks like swapping precincts along existing district borders.

![MCMC example](figures/mcmc_example.png)

`redist` Package
========================================================
- The authors of the paper use a package called `redist` which implements this Metropolis-Hastings algorithm for simulating redistricting
- `redist.mcmc` requires precinct adjacency matrix, population data, and assignments to a valid set of congressional districts
- The authors of the paper shared some code for reproduction, but the code was limited to generating figures and it was not generalizable to different data


Data
========================================================
- The paper uses data from the Harvard Election Archive, but those data did not have congressional district assignments for Colorado
- Instead, we used a shapefile assembled by MGGG constructed from
    - Election data from Colorado Secretary of State’s Office
    - 2010 Census data from the U.S. Census Bureau Data API
    - Precinct borders from U.S. Census Bureau TIGER/Line shapefile repository


Simulation
========================================================
- Using the `sf` package, we read the shapefiles and calculated a precinct adjacency matrix with a package called `spdep`
- Then, we used `redist.mcmc` to generate 3 MCMC chains of 10,000 samples each - this took a few hours
    - We initially tried 3 MCMC chains of 100,000 samples (this is what the authors of the paper do) - this took 12 hours and crashed my laptop
    - We also tried applying a “compactness” constraint, but it requires providing a distance matrix, which took too long to compute

Results
========================================================

Starting map (current districts)
========================================================
```{r, echo=FALSE}
ggplot(co_shp, aes(fill=CD116FP)) +
    geom_sf(size=0) +
    scale_fill_brewer(palette='Set2')
```

Minimum bias map
========================================================
```{r, echo=FALSE}
plot_min_bias(co_sim, co_sim_bias, co, xax)
```