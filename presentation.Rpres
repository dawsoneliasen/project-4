MCMC Redistricting
========================================================
author: Dawson Eliasen, Jonathan Olavarria, Henrique Rio
autosize: true

What is Redistricting?
========================================================
- Def: In the United States is the process of drawing electoral district boundaries. A congressional act passed in 1967 requires that representatives be elected from single-member districts, except when a state has a single representative, in which case one state-wide at-large election be held." (wikipedia)


- Redistricting Criteria:
    - compactness
    - contiguity
    - equal population
    - preservation of existing political communities
    - partisan fairness
    - racial fairness
    

Gerrymandering
========================================================
- What is Gerrymandering?
    - Is the act of actively redrawing district lines so that it tilts as many districts as possible in favor of a party, in order for a party to cement themselves in power.
    - Eg. A controversial redistricting that happened in texas in 2003, where          republicans went from 15 seats in 2002 to 21 in 2004 (democrats got 11).
    - After this the case was brought to the supreme court, where it was ruled that     the supreme court could not address gerrymandering, which leaves to the            congress and states to deal with it.


Automated Redistricting
========================================================
- Researchers have been trying to create a redistricting algorithm since the 1970s
- It began as a optimization problem, where the goal is trying to find the optimal redistricting plan.
- Due to the geographical dependence of redistricting in a state, it is essential to determine the distribution of redistricting plans under the redistricting criteria.
- Simulation Methods are more appropriate since it allows scholars to answer these questions,by  simulating different plans outcomes under different constraints.
- Yet only a few exist so far, using the same Monte Carlo simulation algorithm.







=========

Methodology
========================================================

Redistricting problem representation
========================================================
- Redistricting is represented as a “graph cut” problem
- We can represent a state as a graph $G$
- Each precinct $i$ is a node in $V$
- There is an undirected edge $i \sim j$ connecting nodes $i, j$ if the precincts $i, j$ share a border
- Then, we get voter districts by partitioning the set of nodes $V$
- Since districts are formed by “cutting” edges, we can think of redistricting as a “graph cut” problem


Monte Carlo Markov Chain (MCMC)
========================================================
The Metropolis-Hastings algorithm is used to simulate redistricting plans.
- Define a function $f(x)$, proportional to the pdf of the desired distribution
- Define a proposal distribution $g(x | y)$ that provides a new sample $x$ given the previous sample $y$
- Start with a valid sample, $x_0$
- At each iteration:
    - Generate a “candidate” sample $x^*$ from $g$ (perturb $x_i$)
    - Accept $x^*$ with probability equal to $\frac{f(x^*)}{f(x_i)}$


MCMC Example
========================================================
To simulate redistricting, “perturbation” looks like swapping precincts along existing district borders.

![MCMC example](figures/mcmc_example.png)

`redist` Package
========================================================
- The authors of the paper use a package called `redist` which implements this Metropolis-Hastings algorithm for simulating redistricting
- `redist.mcmc` requires precinct adjacency matrix, population data, and assignments to a valid set of congressional districts
- The authors of the paper shared some code for reproduction, but the code was limited to generating figures and it was not generalizable to different data


Data
========================================================
- The paper uses data from the Harvard Election Archive, but those data did not have congressional district assignments for Colorado
- Instead, we used a shapefile assembled by MGGG constructed from
    - Election data from Colorado Secretary of State’s Office
    - 2010 Census data from the U.S. Census Bureau Data API
    - Precinct borders from U.S. Census Bureau TIGER/Line shapefile repository


Simulation
========================================================
- Using the `sf` package, we read the shapefiles and calculated a precinct adjacency matrix with a package called `spdep`
- Then, we used `redist.mcmc` to generate 3 MCMC chains of 10,000 samples each - this took a few hours
    - We initially tried 3 MCMC chains of 100,000 samples (this is what the authors of the paper do) - this took 12 hours and crashed my laptop
    - We also tried applying a “compactness” constraint, but it requires providing a distance matrix, which took too long to compute

Results
========================================================

Starting map (current districts)
========================================================
```{r, echo=FALSE}
library(tidyverse)
library(plyr)
library(sf)
library(RColorBrewer)
source('plotting_functions.R')

co <- read_sf(dsn='co_precincts', layer='co_precincts')
co <- co %>% arrange(CD116FP)
from <- unique(co$CD116FP)
to <- seq_len(length(unique(co$CD116FP)))
co$CD116FP <- co$CD116FP %>% mapvalues(from, to)

ggplot(co, aes(fill=CD116FP)) +
    geom_sf(size=0) +
    scale_fill_brewer(palette='Set2')
```

MCMC Summary
========================================================
```{r, echo=FALSE}
loadRData <- function(f) {
    load(f)
    get(ls()[ls() != 'f'])
}

co_sim1 <- loadRData('co_redist_mcmc1.RData')
co_sim2 <- loadRData('co_redist_mcmc2.RData')
co_sim3 <- loadRData('co_redist_mcmc3.RData')
co_sim1_seg <- redist.segcalc(co_sim1, co$USH18R, co$TOTPOP)
co_sim2_seg <- redist.segcalc(co_sim2, co$USH18R, co$TOTPOP)
co_sim3_seg <- redist.segcalc(co_sim3, co$USH18R, co$TOTPOP)
co_sim <- cbind(co_sim1$partitions[,!is.na(co_sim1_seg)],
                co_sim2$partitions[,!is.na(co_sim2_seg)], 
                co_sim3$partitions[,!is.na(co_sim3_seg)])
xax <- 1 - c(co_sim1$distance_original[!is.na(co_sim1_seg)],
             co_sim2$distance_original[!is.na(co_sim2_seg)],
             co_sim3$distance_original[!is.na(co_sim3_seg)])
co_sim_bias <- calc_sim_bias(co_sim, co$GOV18D, co$GOV18R)
plot_sim_bias(xax, co_sim_bias)
```


Minimum bias map
========================================================
```{r, echo=FALSE}
plot_min_bias(co_sim, co_sim_bias, co, xax)
```